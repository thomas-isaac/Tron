package fr.exia.Tron;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
/**
 * The main class to handle the Player behavior.
 * @author thomas
 *
 */
public class Player {
	private int button1;
	private int button2;
	private Color color;
	private static final int WIDTH = 40;
	private static final int HEIGHT = 40;
	private int x = 0;
	private int xa = 1;
	private int y = 0;
	private int ya = 0;
	private int[] xArray = new int[255];
	private int[] yArray = new int[255];
	private int i=1;
	
	String winMsg = "";
	String winMsg1 = "Player one wins";
	String winMsg2 = "Player two wins";

	private Game game;
	/**
	 * The Player method invoked for each new player.
	 * @param game
	 * @param initX
	 * The initial x position of the player.
	 * @param initY
	 * The initial y position of the player.
	 * @param button1
	 * The button used to rotate left.
	 * @param button2
	 * The button used to rotate right.
	 * @param color
	 * The color of the player character
	 */
	public Player(Game game, int initX, int initY, int button1, int button2, Color color) {
		this.game = game;
		x = initX;
		y = initY;
		this.button1 = button1;
		this.button2 = button2;
		this.color = color;
		this.xArray[0] = 0;
		this.yArray[0] = initY;
	}
	/*
	 * The move method to update the position of the character.
	 * Where the collision is detected.
	 */
	public void move() {
		if (x + xa > 0 && x + xa < game.getWidth() - WIDTH) x = x + xa;
		if (y + ya > 0 && y + ya < game.getHeight() - HEIGHT) y = y + ya;
		if(collision()) game.gameOver(winMsg);
	}
	/**
	 * The updateWall to update the position of the wall.
	 * Generated by the character movement.
	 * The method checks if the new character representation is not overriding the previous one.
	 * It then adds the coordinates to the wall.
	 */
	public void updateWall() {
		if(!(getBounds().intersects(new Rectangle(xArray[i-1], yArray[i-1], WIDTH, HEIGHT)))) {
			xArray[i] = x;
			yArray[i] = y;
			i++;
		}
	}
	/**
	 * The paint method to paint the player character.
	 * @param g
	 */
	public void paint(Graphics2D g) {
		g.setColor(color);
		g.fillRect(x, y, WIDTH, HEIGHT);
	}
	/**
	 * The keyListener.
	 * When the correspond key is pressed, the next position is updated to rotate either left or right.
	 * @param e
	 */
	public void keyPressed(KeyEvent e) {
		if(e.getKeyCode() == button1) {
			if(xa != 0) {
				ya = -xa;
				xa = 0;
			}
			
			else if(ya != 0) {
				xa = ya;
				ya = 0;
			}
		}
		
		if(e.getKeyCode() == button2) {
			if(xa != 0) {
				ya = xa;
				xa = 0;
			}
			
			else if(ya != 0) {
				xa = -ya;
				ya = 0;
			}
		}
	}
	/**
	 * Checks if the opposite player character intersects for every position of the Wall.
	 * Updates the winMsg if the collision occurs.
	 * Returns isTrue with value true if the collision occurs and false if it doesn't.
	 * @return isTrue
	 */
	private boolean collision() {
		boolean isTrue = false;
		for(int j=0;j<i;j++) {
			if((game.player1.getBounds().intersects(new Rectangle(game.player2.xArray[j], game.player2.yArray[j], WIDTH, HEIGHT)))) {
				isTrue = true;
				winMsg = winMsg2;
			}
			if((game.player2.getBounds().intersects(new Rectangle(game.player1.xArray[j], game.player1.yArray[j], WIDTH, HEIGHT)))) {
				isTrue = true;
				winMsg = winMsg1;
			}
			/*if((getBounds().intersects(new Rectangle(xArray[j], yArray[j], WIDTH, HEIGHT)))) {
				isTrue = true;
				winMsg = winMsg2;
			}*/
		}
		return isTrue;
	}
	/**
	 * The getBounds method to get the area occupied by the player character at a specific position.
	 * @return
	 */
	public Rectangle getBounds() {
		return new Rectangle(x, y, WIDTH, HEIGHT);
	}

}
