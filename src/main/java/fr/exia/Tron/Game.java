package fr.exia.Tron;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Main class of the program.
 * The game consists in two players controlling Lightcycles via two keyboard inputs. 
 * The aim is to build a wall to surround the opponent and make him crash on it.
 * @author thomas
 *
 */
public class Game extends JPanel{
	private static final long serialVersionUID = 1L;
/*
 * Creation of the new Player objects for player 1 and 2.
 */
	Player player1 = new Player(this, 0, 300, KeyEvent.VK_LEFT, KeyEvent.VK_RIGHT, Color.BLUE);
	Player player2 = new Player(this, 0, 50, KeyEvent.VK_Q, KeyEvent.VK_D, Color.RED);
	
/*
 * The Game method.
*/
	public Game() {
		
		/*
		 * Addition of the KeyListener
		 * Mainly used for keyPressed
		 */
		addKeyListener(new KeyListener() {
/*
 * (non-Javadoc)
 * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)
 */
			//@Override
			public void keyPressed(KeyEvent e) {
				player1.keyPressed(e);
				player2.keyPressed(e);
			}
/*
 * (non-Javadoc)
 * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
 */
			//@Override
			public void keyReleased(KeyEvent e) {
			}
/*
 * (non-Javadoc)
 * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)
 */
			//@Override
			public void keyTyped(KeyEvent e) {				
			}
			
		});
		/*
		 * Sets the focusable state of the component to allow events to be dispatched on it.
		 */
		setFocusable(true);
	}
	/**
	 * The move method for the players.
	 */
	private void move() {
		player1.move();
		player2.move();
	}
	/**
	 * The method to update the wall generated by the player's movement
	 */
	private void updateWall() {
		player1.updateWall();
		player2.updateWall();
	}

	/**
	 * The paint method to paint the graphics in the frame
	 * @param g
	 */
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		Graphics2D g2d = (Graphics2D) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		player1.paint(g2d);
		player2.paint(g2d);
	}
	/**
	 * The gameOver method happening on collision 
	 * @param winMsg
	 */
	public void gameOver(String winMsg) {
		JOptionPane.showMessageDialog(this, winMsg , "Game Over", JOptionPane.YES_NO_OPTION);
		System.exit(ABORT);
	}
	/**
	 * The main method where the frame is created and the game run.
	 * @param args
	 * @throws InterruptedException
	 */
	public static void main(String[] args) throws InterruptedException {
		JFrame frame = new JFrame("Pong");
		Game game = new Game();
		frame.add(game);
		frame.setSize(600, 400);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		/**
		 * While the state is true - basically an infinite.
		 * The game runs, the graphics are repainted.
		 * A thread is implemented to add a delay.
		 */
		while (true) {
			game.move();
			game.updateWall();
			game.repaint();
			/**
			 * try and catch to throw exception if a problem is encountered and prints the error log.
			 */
			try {
			Thread.sleep(7);
			}catch(InterruptedException e) {e.printStackTrace();}
		}
	}

}